package ua.javarush.task.pro.task15.task1539;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

/* 
Використання Paths 2
Реалізуй метод joinToPath, який повинен об’єднати всі частини шляху зі списку partsList в один шлях і повернути його.

Для створення повного шляху використовуй метод Paths.get(String first, String... more).

Requirements:
1. Метод joinToPath повинен повернути шлях, що складається з частин зі списку partsList.
2. Метод joinToPath повинен використовувати метод Paths.get (String first, String ... more), передавши в нього всі елементи списку.
*/

public class Solution {

    public static void main(String[] args) {
        System.out.println(joinToPath(Arrays.asList("d:/", "study/", "javarush/", "корисні шматки коду.txt")));
    }

    public static Path joinToPath(List<String> partsList) {
        return Paths.get(partsList.get(0), partsList.subList(1, partsList.size()).toArray(new String[0]));
    }
}

/*

Вираз new String[0] створює новий масив рядків (String[]), розмір якого дорівнює 0. Число в квадратних дужках після типу
при створенні нового масиву вказує на його розмір.

У даному контексті new String[0] використовується в методі toArray(), і це просто означає, що ми хочемо отримати наш
список в якості масиву рядків. Параметр new String[0] надає потрібний тип масиву для методу toArray().

Якщо масив, що передається як аргумент, недостатній для зберігання всіх елементів списку, метод toArray() створює новий
масив відповідного розміру. Таким чином, використання new String[0] є ефективним способом забезпечити правильний тип для
масиву, який повертає toArray(), без необхідності заздалегідь знати розмір списку.

У цьому варіанті partsList.get(0) є першим аргументом для Paths.get(),
а partsList.subList(1, partsList.size()).toArray(new String[0]) передає решту елементів списку у вигляді масиву String.

************************************************************************************************************************************
Метод subList(int fromIndex, int toIndex) у Java використовується для отримання підсписку від зазначеного списку.
Параметри fromIndex та toIndex - це початковий та кінцевий індекси підсписку. Індексація починається з 0.

Вираз partsList.subList(1, partsList.size()) створює підсписок, що починається з елемента з індексом 1 (другого елемента
списку, оскільки індексація починається з 0) та закінчується останнім елементом списку.

Наприклад, якщо у вас є список ["a", "b", "c", "d"], то вираз list.subList(1, list.size()) поверне
підсписок ["b", "c", "d"].

Зверніть увагу, що підсписок, отриманий з методу subList(), є "переглядом" початкового списку. Це означає, що будь-які
зміни у підсписку відобразяться у початковому списку, і навпаки.

*/