package ua.javarush.task.pro.task13.task1314;

public class StringLinkedList {
    private Node first = new Node();
    private Node last = new Node();

    public void add(String value) {
        if (first.next == null) {
            Node node = new Node();
            node.value = value;
            first.next = node;
        }
        if (last.prev == null) {
            last.prev = first.next;
            return;
        }

        Node node = new Node();
        node.value = value;

        Node lastNode = last.prev;
        lastNode.next = node;
        node.prev = lastNode;
        last.prev = node;
    }

    public String get(int index) {
        //напишіть тут ваш код
        Node current = first.next;      // починаємо з першого елемента
        int counter = 0;                // лічильник для слідкування за поточним індексом
        while (current != null) {
            if (counter == index) {
                return current.value;
            }
            current = current.next;     // переходимо до наступного елемента
            counter ++;                 // збільшуємо лічильник
        }
        return null;                    // якщо індекс був за межами списку, повертаємо null
    }

    public static class Node {
        private Node prev;
        private String value;
        private Node next;
    }
}

/*

Метод get(int index) повинен повертати значення зв'язаного списку на певному індексі. Оскільки ми працюємо із двобічно
зв'язаним списком, ми можемо просто пройти по списку від початку до потрібного індексу.

Цей метод працює шляхом проходження по списку від першого елемента до елемента з вказаним індексом. Якщо він дійде до
кінця списку перед тим, як знайде потрібний індекс, метод поверне null.

Цей код враховує, що індексація в списку починається з нуля, так само, як і в масивах і ArrayList в Java. Також він
передбачає, що метод add(String value) коректно додає елементи в список.

************************************************************************************************************************

В методі add(String value) перевірка if (last.prev == null) відбувається після того, як ми додали перший елемент в список.

Ми спочатку перевіряємо, чи порожній список if (first.next == null). Якщо так, створюємо новий вузол, присвоюємо йому
значення і робимо цей вузол першим в списку, вказуючи на нього з початкового вузла first.

Далі перевіряємо, чи last.prev == null, що вказує на те, що ми ще не вказали останній елемент списку. Якщо так, то ми
присвоюємо last.prev посилання на щойно створений вузол, який є єдиним в списку, і тому є і першим, і останнім елементом.

!!!!!!!!!!!!
Команда return; в даному випадку завершує виконання методу add, тому що коли список був порожній і ми додали перший
елемент, немає потреби виконувати додатковий код для додавання елемента в кінець списку, який розташований нижче в методі.

Якщо ж список не був порожній, то last.prev != null, і ми пропускаємо цей блок if, переходимо до створення нового вузла,
присвоюємо йому значення і додаємо його в кінець списку.

Команда return; в методі, що не повертає значення (такий як void add(String value)), призводить до негайного завершення
методу і повернення управління до коду, що викликав цей метод.

У вашому конкретному випадку, коли умова if (last.prev == null) є істинною (true), то код в цьому блоку виконується і
на команді return; метод add завершується. Таким чином, коли ви додаєте перший елемент до списку, після його додавання
виконання методу завершується.

Це ефективно запобігає виконанню решти коду в методі add після цього if блоку для випадку, коли список був порожній і
щойно було додано перший елемент.

*/
