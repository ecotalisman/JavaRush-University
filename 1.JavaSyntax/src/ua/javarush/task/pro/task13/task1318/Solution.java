package ua.javarush.task.pro.task13.task1318;

/* 
Наступний місяць, будь ласка
У класі Solution реалізуй метод getNextMonth, який повинен повертати наступний місяць, а якщо передано останній
місяць — повертати перший. Скористайся методами values і ordinal.
Метод main у перевірці не використовується.


Requirements:
1. Реалізуй метод public static Month getNextMonth(Month): він має працювати згідно з умовою.
2. У методі getNextMonth слід використовувати методи ordinal() и values().
*/

import javax.management.monitor.MonitorNotification;

public class Solution {

    public static void main(String[] args) {
        System.out.println(getNextMonth(Month.JANUARY));
        System.out.println(getNextMonth(Month.JULY));
    }

    public static Month getNextMonth(Month month) {
        //напишіть тут ваш код

        int ordinal = (month.ordinal() + 1) % Month.values().length;
        return Month.values()[ordinal];

        // My First solution:
//        int ordinal = month.ordinal();
//
//        for (int i = 0; i < Month.values().length; i++) {
//            if (Month.values()[i] == month && ordinal < 11) {
//                month = Month.values()[ordinal + 1];
//            } else if (ordinal == 11) {
//                month = Month.values()[0];
//            }
//        }
//        return month;
    }
}

/*

Спростимо 1-ий варіант рішення (My First solution).
Ми можемо скористатися методом ordinal() для отримання порядкового номера поточного
місяця, а потім використати цей номер для отримання наступного місяця в масиві, який повертає метод values().

Проте ми повинні пам'ятати, що якщо поточний місяць - грудень (порядковий номер 11), наступним місяцем буде січень
(порядковий номер 0). Це можна реалізувати за допомогою оператора %, який повертає остачу від ділення.

public static Month getNextMonth(Month month) {
    int ordinal = (month.ordinal() + 1) % Month.values().length;
    return Month.values()[ordinal];
}

У цьому коді, якщо month.ordinal() + 1 дорівнює Month.values().length, оператор % поверне 0, тому наступним місяцем
після грудня буде січень.

Використовуючи оператор % (модулі), ми визначаємо остачу від ділення.
В нашому випадку, ми додаємо 1 до порядкового номера поточного місяця і ділимо результат на кількість місяців (12).

Ось можливі варіанти для ordinal:

Січень (0) + 1 % 12 = 1. Тому наступним місяцем після січня є лютий.
Лютий (1) + 1 % 12 = 2. Тому наступним місяцем після лютого є березень.
Березень (2) + 1 % 12 = 3. Тому наступним місяцем після березня є квітень.
Квітень (3) + 1 % 12 = 4. Тому наступним місяцем після квітня є травень.
Травень (4) + 1 % 12 = 5. Тому наступним місяцем після травня є червень.
Червень (5) + 1 % 12 = 6. Тому наступним місяцем після червня є липень.
Липень (6) + 1 % 12 = 7. Тому наступним місяцем після липня є серпень.
Серпень (7) + 1 % 12 = 8. Тому наступним місяцем після серпня є вересень.
Вересень (8) + 1 % 12 = 9. Тому наступним місяцем після вересня є жовтень.
Жовтень (9) + 1 % 12 = 10. Тому наступним місяцем після жовтня є листопад.
Листопад (10) + 1 % 12 = 11. Тому наступним місяцем після листопада є грудень.
Грудень (11) + 1 % 12 = 0. Тому наступним місяцем після грудня є січень.

Таким чином, якщо ми додаємо 1 до порядкового номера поточного місяця і ділимо результат на 12, ми завжди отримуємо
порядковий номер наступного місяця, а для грудня ми отримуємо 0 (січень).

Оператор % (модулі) повертає остачу від ділення лівого операнда на правий. Отже, в нашому випадку вираз
(month.ordinal() + 1) % 12 визначає остачу від ділення суми порядкового номера місяця та одиниці на кількість місяців (12).

Для 3 місяців ми отримуємо наступне:

1. Лютий (порядковий номер 1):
(1 + 1) % 12 рівно 2 % 12. Оскільки 2 менше 12, результатом є 2. Отже, наступний місяць після лютого є березень
(порядковий номер 2).

2. Березень (порядковий номер 2):
(2 + 1) % 12 рівно 3 % 12. Оскільки 3 менше 12, результатом є 3. Отже, наступний місяць після березня є квітень
(порядковий номер 3).

3. Квітень (порядковий номер 3):
(3 + 1) % 12 рівно 4 % 12. Оскільки 4 менше 12, результатом є 4. Отже, наступний місяць після квітня є травень
(порядковий номер 4).

Таким чином, вираз (month.ordinal() + 1) % 12 завжди повертає порядковий номер наступного місяця, а для грудня
(порядковий номер 11) він повертає 0 (січня).


Операція "залишок від ділення" (або "модулю") є доволі простою математичною операцією. Коли ви ділите одне число на
інше, ви отримуєте результат ділення і можливо залишок, якщо ділене не ділиться націло на дільник.

Процес визначення залишку від ділення можна уявити так:

1. Спочатку ви ділите одне число на інше, обчислюючи тільки цілу частину від ділення. Це означає, що ви ігноруєте будь-які
дробові частини або десяткові числа, які можуть виникнути в результаті ділення.

2. Потім ви помножуєте цю цілу частину на дільник.

Нарешті, ви віднімаєте це число від діленого. Результат, який ви отримуєте, це залишок від ділення.

***************************************************************************************************************************************

Операція отримання залишку від ділення, що використовується в програмуванні (часто позначається символом %),
відрізняється від звичайного ділення, яке ми знаємо з математики.

Коли ми ділимо 1 на 12 або 2 на 12 в математиці, ми отримуємо десятковий дріб, як ми вказали - 0,0833 і 0,1666
відповідно. Але це не те, що робить операція отримання залишку від ділення.

Операція отримання залишку від ділення повертає нам залишок від цілочисельного ділення. Це означає, що вона повертає
те, що "залишається", коли ми віднімаємо від діленого максимально можливу кількість, кратну дільнику.

Наприклад, якщо ми ділимо 1 на 12:

* Максимальна кількість, кратна 12 і менша або рівна 1, є 0 (тому що 12 більше за 1).
* Тоді "залишається" саме число 1, тому 1 % 12 = 1.

Аналогічно, якщо ми ділимо 2 на 12:

* Максимальна кількість, кратна 12 і менша або рівна 2, є 0 (тому що 12 більше за 2).
* Тоді "залишається" саме число 2, тому 2 % 12 = 2.

Сподіваюся, це роз'яснює, як працює операція отримання залишку від ділення в програмуванні!

Коли ми говоримо про число, що "кратне дільнику", ми маємо на увазі, що дільник помножений на деяке ціле число дає
наше число.

У випадку 2 % 12, нам потрібно знайти найбільше число, що кратне 12 і не перевищує 2.

Проте, 12 помножити на будь-яке ціле число (окрім нуля) завжди буде більше 2. Тому найбільше число, що кратне 12 і
не перевищує 2, це 0 (12 помножити на 0).

Залишок від ділення - це те, що "залишається" після того, як ми віднімемо від діленого (у нашому випадку 2) найбільше
число, кратне дільнику (у нашому випадку 0). І те, що "залишається" у нас, це саме число 2, тому 2 % 12 = 2.

*/